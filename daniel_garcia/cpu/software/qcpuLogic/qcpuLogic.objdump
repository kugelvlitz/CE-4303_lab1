
qcpuLogic.elf:     file format elf32-littlenios2
qcpuLogic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000180

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00000478 memsz 0x00000478 flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x04000498 align 2**12
         filesz 0x00000004 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000318  04000180  04000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00000000  0400049c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00000000  04000498  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00000004  0400049c  00002004  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0000011c  0000011c  00002004  2**0
                  CONTENTS
  7 .rom_0        00000000  0400049c  0400049c  00002004  2**0
                  CONTENTS
  8 .ram_0        00000000  04002000  04002000  00002004  2**0
                  CONTENTS
  9 .comment      0000002c  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000218  00000000  00000000  00002030  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006e56  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000194f  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000171d  00000000  00000000  0000a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000021c  00000000  00000000  0000c10c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000fe0  00000000  00000000  0000c328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000005eb  00000000  00000000  0000d308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000010  00000000  00000000  0000d8f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000188  00000000  00000000  0000d908  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0000ead8  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0000eadb  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000eae7  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000eae8  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000004  00000000  00000000  0000eae9  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000004  00000000  00000000  0000eaed  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000004  00000000  00000000  0000eaf1  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000003  00000000  00000000  0000eaf5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000032  00000000  00000000  0000eaf8  2**0
                  CONTENTS, READONLY
 28 .jdi          000038b6  00000000  00000000  0000eb2a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000180 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000000 l    d  .rwdata	00000000 .rwdata
00000004 l    d  .bss	00000000 .bss
0000011c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0400049c l    d  .rom_0	00000000 .rom_0
04002000 l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Garza/Desktop/p1soQ20.1/daniel_garcia/cpu/software/qcpuLogic_bsp/obj/HAL/src/crt0.o
040001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
040001bc l     F .text	00000030 timer_isr
00000004 l     O .bss	00000004 leds
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000018 g     O .bss	00000004 alt_instruction_exception_handler
040003c8 g     F .text	0000002c alt_main
0000001c g     O .bss	00000100 alt_irq
04000498 g       *ABS*	00000000 __flash_rwdata_start
04000490 g     F .text	00000008 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
00000010 g     O .bss	00000004 alt_argv
00008000 g       *ABS*	00000000 _gp
04000420 g     F .text	00000070 alt_exception_cause_generated_bad_addr
0000011c g       *ABS*	00000000 __bss_end
040002ac g     F .text	00000068 alt_iic_isr_register
04002000 g       *ABS*	00000000 __alt_mem_ram_0
04000294 g     F .text	00000018 alt_ic_irq_enabled
00000008 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	00000060 alt_irq_handler
04000418 g     F .text	00000004 alt_dcache_flush_all
00000004 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __ram_rodata_end
0000011c g       *ABS*	00000000 end
0400015c g     F .exceptions	00000024 alt_instruction_exception_entry
04000000 g       *ABS*	00000000 __alt_stack_pointer
04000180 g     F .text	0000003c _start
04000414 g     F .text	00000004 alt_sys_init
00000000 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
0000011c g       *ABS*	00000000 __alt_stack_base
00000004 g       *ABS*	00000000 __bss_start
040001ec g     F .text	00000034 main
0000000c g     O .bss	00000004 alt_envp
04000498 g       *ABS*	00000000 __flash_rodata_start
040003f4 g     F .text	00000020 alt_irq_init
00000014 g     O .bss	00000004 alt_argc
04000020 g       .exceptions	00000000 alt_irq_entry
04000020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
04000220 g     F .text	00000004 alt_ic_isr_register
00000004 g       *ABS*	00000000 _edata
0000011c g       *ABS*	00000000 _end
04000180 g       *ABS*	00000000 __ram_exceptions_end
0400025c g     F .text	00000038 alt_ic_irq_disable
04000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_rom_0
0400000c g       .entry	00000000 _exit
0400041c g     F .text	00000004 alt_icache_flush_all
00000000 g     O .rwdata	00000004 alt_priority_mask
04000224 g     F .text	00000038 alt_ic_irq_enable
04000314 g     F .text	000000b4 alt_load



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08406014 	ori	at,at,384
    jmp r1
 4000008:	0800683a 	jmp	at

0400000c <_exit>:
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	400015c0 	call	400015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defffe04 	addi	sp,sp,-8
 4000100:	dfc00115 	stw	ra,4(sp)
 4000104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400010c:	04000034 	movhi	r16,0
 4000110:	84000704 	addi	r16,r16,28
    i = 0;
 4000114:	0005883a 	mov	r2,zero
    mask = 1;
 4000118:	00c00044 	movi	r3,1
      if (active & mask)
 400011c:	20ca703a 	and	r5,r4,r3
 4000120:	28000b26 	beq	r5,zero,4000150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 4000124:	100490fa 	slli	r2,r2,3
 4000128:	8085883a 	add	r2,r16,r2
 400012c:	10c00017 	ldw	r3,0(r2)
 4000130:	11000117 	ldw	r4,4(r2)
 4000134:	183ee83a 	callr	r3
 4000138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 400013c:	203ff51e 	bne	r4,zero,4000114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 4000140:	dfc00117 	ldw	ra,4(sp)
 4000144:	dc000017 	ldw	r16,0(sp)
 4000148:	dec00204 	addi	sp,sp,8
 400014c:	f800283a 	ret
      mask <<= 1;
 4000150:	1806907a 	slli	r3,r3,1
      i++;
 4000154:	10800044 	addi	r2,r2,1
      if (active & mask)
 4000158:	003ff006 	br	400011c <alt_irq_handler+0x20>

0400015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 400015c:	d0a00617 	ldw	r2,-32744(gp)
{
 4000160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 4000164:	10000326 	beq	r2,zero,4000174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000168:	000d883a 	mov	r6,zero
 400016c:	013fffc4 	movi	r4,-1
 4000170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 4000178:	0005883a 	mov	r2,zero
 400017c:	f800283a 	ret

Disassembly of section .text:

04000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000180:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4000184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 400018c:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4000194:	10800114 	ori	r2,r2,4

    movhi r3, %hi(__bss_end)
 4000198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 400019c:	18c04714 	ori	r3,r3,284

    beq r2, r3, 1f
 40001a0:	10c00326 	beq	r2,r3,40001b0 <_start+0x30>

0:
    stw zero, (r2)
 40001a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001ac:	10fffd36 	bltu	r2,r3,40001a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001b0:	40003140 	call	4000314 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001b4:	40003c80 	call	40003c8 <alt_main>

040001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001b8:	003fff06 	br	40001b8 <alt_after_alt_main>

040001bc <timer_isr>:
#include "sys/alt_irq.h"

static unsigned leds = 0;
static void timer_isr(void *context){
	(void) context;
	leds = leds << 1 | (IORD_ALTERA_AVALON_PIO_DATA(PIO_CONTINUE_0_BASE)&1);
 40001bc:	d0a00117 	ldw	r2,-32764(gp)
 40001c0:	1006907a 	slli	r3,r2,1
 40001c4:	00810034 	movhi	r2,1024
 40001c8:	10941c37 	ldwio	r2,20592(r2)
 40001cc:	1080004c 	andi	r2,r2,1
 40001d0:	10c4b03a 	or	r2,r2,r3
 40001d4:	d0a00115 	stw	r2,-32764(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_LEDS_0_BASE,leds);
 40001d8:	00c10034 	movhi	r3,1024
 40001dc:	18941035 	stwio	r2,20544(r3)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,0);
 40001e0:	00810034 	movhi	r2,1024
 40001e4:	10140035 	stwio	zero,20480(r2)
}
 40001e8:	f800283a 	ret

040001ec <main>:

int main()
{ 
 40001ec:	defffe04 	addi	sp,sp,-8

	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,timer_isr,NULL,NULL);
 40001f0:	01810034 	movhi	r6,1024
 40001f4:	d8000015 	stw	zero,0(sp)
 40001f8:	000f883a 	mov	r7,zero
 40001fc:	31806f04 	addi	r6,r6,444
 4000200:	01400044 	movi	r5,1
 4000204:	0009883a 	mov	r4,zero
{ 
 4000208:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,TIMER_0_IRQ,timer_isr,NULL,NULL);
 400020c:	40002200 	call	4000220 <alt_ic_isr_register>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,ALTERA_AVALON_TIMER_CONTROL_ITO_MSK|ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);
 4000210:	00c000c4 	movi	r3,3
 4000214:	00810034 	movhi	r2,1024
 4000218:	10d40135 	stwio	r3,20484(r2)

  while (1);
 400021c:	003fff06 	br	400021c <main+0x30>

04000220 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4000220:	40002ac1 	jmpi	40002ac <alt_iic_isr_register>

04000224 <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 4000224:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000228:	00bfff84 	movi	r2,-2
 400022c:	1884703a 	and	r2,r3,r2
 4000230:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 4000234:	00800044 	movi	r2,1
 4000238:	d1200217 	ldw	r4,-32760(gp)
 400023c:	114a983a 	sll	r5,r2,r5
 4000240:	290ab03a 	or	r5,r5,r4
 4000244:	d1600215 	stw	r5,-32760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000248:	d0a00217 	ldw	r2,-32760(gp)
 400024c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 4000250:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 4000254:	0005883a 	mov	r2,zero
 4000258:	f800283a 	ret

0400025c <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 400025c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4000260:	00bfff84 	movi	r2,-2
 4000264:	1884703a 	and	r2,r3,r2
 4000268:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 400026c:	00bfff84 	movi	r2,-2
 4000270:	d1200217 	ldw	r4,-32760(gp)
 4000274:	114a183a 	rol	r5,r2,r5
 4000278:	290a703a 	and	r5,r5,r4
 400027c:	d1600215 	stw	r5,-32760(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4000280:	d0a00217 	ldw	r2,-32760(gp)
 4000284:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 4000288:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 400028c:	0005883a 	mov	r2,zero
 4000290:	f800283a 	ret

04000294 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4000294:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4000298:	00800044 	movi	r2,1
 400029c:	1144983a 	sll	r2,r2,r5
 40002a0:	10c4703a 	and	r2,r2,r3
}
 40002a4:	1004c03a 	cmpne	r2,r2,zero
 40002a8:	f800283a 	ret

040002ac <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40002ac:	28800808 	cmpgei	r2,r5,32
 40002b0:	1000161e 	bne	r2,zero,400030c <alt_iic_isr_register+0x60>
{
 40002b4:	defffe04 	addi	sp,sp,-8
 40002b8:	dfc00115 	stw	ra,4(sp)
 40002bc:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 40002c0:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40002c4:	00bfff84 	movi	r2,-2
 40002c8:	8084703a 	and	r2,r16,r2
 40002cc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 40002d0:	280690fa 	slli	r3,r5,3
 40002d4:	00800034 	movhi	r2,0
 40002d8:	10800704 	addi	r2,r2,28
 40002dc:	10c5883a 	add	r2,r2,r3
 40002e0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 40002e4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40002e8:	30000626 	beq	r6,zero,4000304 <alt_iic_isr_register+0x58>
 40002ec:	40002240 	call	4000224 <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 40002f0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 40002f4:	dfc00117 	ldw	ra,4(sp)
 40002f8:	dc000017 	ldw	r16,0(sp)
 40002fc:	dec00204 	addi	sp,sp,8
 4000300:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4000304:	400025c0 	call	400025c <alt_ic_irq_disable>
 4000308:	003ff906 	br	40002f0 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 400030c:	00bffa84 	movi	r2,-22
}
 4000310:	f800283a 	ret

04000314 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000314:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000318:	00800034 	movhi	r2,0
 400031c:	00c10034 	movhi	r3,1024
 4000320:	dfc00015 	stw	ra,0(sp)
 4000324:	10800004 	addi	r2,r2,0
 4000328:	18c12604 	addi	r3,r3,1176
 400032c:	10c00326 	beq	r2,r3,400033c <alt_load+0x28>
  {
    while( to != end )
 4000330:	01000034 	movhi	r4,0
 4000334:	21000104 	addi	r4,r4,4
 4000338:	1100141e 	bne	r2,r4,400038c <alt_load+0x78>
  if (to != from)
 400033c:	00810034 	movhi	r2,1024
 4000340:	00c10034 	movhi	r3,1024
 4000344:	10800804 	addi	r2,r2,32
 4000348:	18c00804 	addi	r3,r3,32
 400034c:	10c00326 	beq	r2,r3,400035c <alt_load+0x48>
    while( to != end )
 4000350:	01010034 	movhi	r4,1024
 4000354:	21006004 	addi	r4,r4,384
 4000358:	1100111e 	bne	r2,r4,40003a0 <alt_load+0x8c>
  if (to != from)
 400035c:	00800034 	movhi	r2,0
 4000360:	00c10034 	movhi	r3,1024
 4000364:	10800004 	addi	r2,r2,0
 4000368:	18c12604 	addi	r3,r3,1176
 400036c:	10c00326 	beq	r2,r3,400037c <alt_load+0x68>
    while( to != end )
 4000370:	01000034 	movhi	r4,0
 4000374:	21000004 	addi	r4,r4,0
 4000378:	11000e1e 	bne	r2,r4,40003b4 <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400037c:	40004180 	call	4000418 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000380:	dfc00017 	ldw	ra,0(sp)
 4000384:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 4000388:	400041c1 	jmpi	400041c <alt_icache_flush_all>
    {
      *to++ = *from++;
 400038c:	19400017 	ldw	r5,0(r3)
 4000390:	10800104 	addi	r2,r2,4
 4000394:	18c00104 	addi	r3,r3,4
 4000398:	117fff15 	stw	r5,-4(r2)
 400039c:	003fe606 	br	4000338 <alt_load+0x24>
 40003a0:	19400017 	ldw	r5,0(r3)
 40003a4:	10800104 	addi	r2,r2,4
 40003a8:	18c00104 	addi	r3,r3,4
 40003ac:	117fff15 	stw	r5,-4(r2)
 40003b0:	003fe906 	br	4000358 <alt_load+0x44>
 40003b4:	19400017 	ldw	r5,0(r3)
 40003b8:	10800104 	addi	r2,r2,4
 40003bc:	18c00104 	addi	r3,r3,4
 40003c0:	117fff15 	stw	r5,-4(r2)
 40003c4:	003fec06 	br	4000378 <alt_load+0x64>

040003c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40003c8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40003cc:	0009883a 	mov	r4,zero
{
 40003d0:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 40003d4:	40003f40 	call	40003f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40003d8:	40004140 	call	4000414 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 40003dc:	d1a00317 	ldw	r6,-32756(gp)
 40003e0:	d1600417 	ldw	r5,-32752(gp)
 40003e4:	d1200517 	ldw	r4,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 40003e8:	dfc00017 	ldw	ra,0(sp)
 40003ec:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 40003f0:	40001ec1 	jmpi	40001ec <main>

040003f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40003f4:	deffff04 	addi	sp,sp,-4
 40003f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40003fc:	40004900 	call	4000490 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000400:	00800044 	movi	r2,1
 4000404:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000408:	dfc00017 	ldw	ra,0(sp)
 400040c:	dec00104 	addi	sp,sp,4
 4000410:	f800283a 	ret

04000414 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_100MS_0, timer_100ms_0);
}
 4000414:	f800283a 	ret

04000418 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4000418:	f800283a 	ret

0400041c <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400041c:	f800283a 	ret

04000420 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 4000420:	213ffe84 	addi	r4,r4,-6
 4000424:	20800428 	cmpgeui	r2,r4,16
 4000428:	1000151e 	bne	r2,zero,4000480 <alt_exception_cause_generated_bad_addr+0x60>
 400042c:	200890ba 	slli	r4,r4,2
 4000430:	00810034 	movhi	r2,1024
 4000434:	2085883a 	add	r2,r4,r2
 4000438:	10811017 	ldw	r2,1088(r2)
 400043c:	1000683a 	jmp	r2
 4000440:	04000488 	cmpgei	r16,zero,18
 4000444:	04000488 	cmpgei	r16,zero,18
 4000448:	04000480 	call	400048 <_gp+0x3f8048>
 400044c:	04000480 	call	400048 <_gp+0x3f8048>
 4000450:	04000480 	call	400048 <_gp+0x3f8048>
 4000454:	04000488 	cmpgei	r16,zero,18
 4000458:	04000480 	call	400048 <_gp+0x3f8048>
 400045c:	04000480 	call	400048 <_gp+0x3f8048>
 4000460:	04000488 	cmpgei	r16,zero,18
 4000464:	04000488 	cmpgei	r16,zero,18
 4000468:	04000480 	call	400048 <_gp+0x3f8048>
 400046c:	04000488 	cmpgei	r16,zero,18
 4000470:	04000480 	call	400048 <_gp+0x3f8048>
 4000474:	04000480 	call	400048 <_gp+0x3f8048>
 4000478:	04000480 	call	400048 <_gp+0x3f8048>
 400047c:	04000488 	cmpgei	r16,zero,18
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4000480:	0005883a 	mov	r2,zero
 4000484:	f800283a 	ret
 4000488:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 400048c:	f800283a 	ret

04000490 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4000490:	000170fa 	wrctl	ienable,zero
}
 4000494:	f800283a 	ret
