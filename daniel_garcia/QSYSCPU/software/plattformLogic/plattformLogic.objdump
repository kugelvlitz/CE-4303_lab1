
plattformLogic.elf:     file format elf32-littlenios2
plattformLogic.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000180

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000e90 memsz 0x00000e90 flags r-x
    LOAD off    0x00002000 vaddr 0x00001000 paddr 0x00000eb0 align 2**12
         filesz 0x00000014 memsz 0x00000144 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000d30  00000180  00000180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00001000  00000ec4  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000014  00001000  00000eb0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  00001014  00000ec4  00002014  2**2
                  ALLOC, SMALL_DATA
  6 .rom_0        00000000  00000ec4  00000ec4  00002014  2**0
                  CONTENTS
  7 .ram_0        00000000  00001144  00001144  00002014  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000218  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000700c  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000019e1  00000000  00000000  00009264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001e50  00000000  00000000  0000ac45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000021c  00000000  00000000  0000ca98  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000010fc  00000000  00000000  0000ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000005eb  00000000  00000000  0000ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0000e39c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000230  00000000  00000000  0000e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000f6bc  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000f6bf  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000f6cb  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000f6cc  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000f6cd  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000f6d1  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000f6d5  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  0000f6d9  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000036  00000000  00000000  0000f6e2  2**0
                  CONTENTS, READONLY
 27 .jdi          00003ce4  00000000  00000000  0000f718  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000180 l    d  .text	00000000 .text
00001000 l    d  .rodata	00000000 .rodata
00001000 l    d  .rwdata	00000000 .rwdata
00001014 l    d  .bss	00000000 .bss
00000ec4 l    d  .rom_0	00000000 .rom_0
00001144 l    d  .ram_0	00000000 .ram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/Garza/Desktop/p1soQ20.1/daniel_garcia/QSYSCPU/software/plattformLogic_bsp/obj/HAL/src/crt0.o
000001b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000001bc l     F .text	00000a4c timer_isr
0000102c l     O .bss	00000004 display1
00001028 l     O .bss	00000004 display2
00001024 l     O .bss	00000004 display3
00001020 l     O .bss	00000004 display4
0000101c l     O .bss	00000004 display5
00001018 l     O .bss	00000004 display6
00001008 l     O .rwdata	00000004 lastbtnleftright
00001014 l     O .bss	00000004 display_selector
00001000 l     O .rwdata	00000004 lastbtnupdown
00001004 l     O .rwdata	00000004 btnupdown
0000100c l     O .rwdata	00000004 temp_display
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001040 g     O .bss	00000004 alt_instruction_exception_handler
00000de0 g     F .text	0000002c alt_main
00001044 g     O .bss	00000100 alt_irq
00000eb0 g       *ABS*	00000000 __flash_rwdata_start
00000ea8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001038 g     O .bss	00000004 alt_argv
00009000 g       *ABS*	00000000 _gp
00000e38 g     F .text	00000070 alt_exception_cause_generated_bad_addr
00001144 g       *ABS*	00000000 __bss_end
00000cc4 g     F .text	00000068 alt_iic_isr_register
00001000 g       *ABS*	00000000 __alt_mem_ram_0
00000cac g     F .text	00000018 alt_ic_irq_enabled
00001030 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000060 alt_irq_handler
00000e30 g     F .text	00000004 alt_dcache_flush_all
00001014 g       *ABS*	00000000 __ram_rwdata_end
00001000 g       *ABS*	00000000 __ram_rodata_end
00001144 g       *ABS*	00000000 end
0000015c g     F .exceptions	00000024 alt_instruction_exception_entry
00002000 g       *ABS*	00000000 __alt_stack_pointer
00000180 g     F .text	0000003c _start
00000e2c g     F .text	00000004 alt_sys_init
00001000 g       *ABS*	00000000 __ram_rwdata_start
00001000 g       *ABS*	00000000 __ram_rodata_start
00001144 g       *ABS*	00000000 __alt_stack_base
00001014 g       *ABS*	00000000 __bss_start
00000c08 g     F .text	00000030 main
00001034 g     O .bss	00000004 alt_envp
00000eb0 g       *ABS*	00000000 __flash_rodata_start
00000e0c g     F .text	00000020 alt_irq_init
0000103c g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000c38 g     F .text	00000004 alt_ic_isr_register
00001014 g       *ABS*	00000000 _edata
00001144 g       *ABS*	00000000 _end
00000180 g       *ABS*	00000000 __ram_exceptions_end
00000c74 g     F .text	00000038 alt_ic_irq_disable
00002000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_rom_0
0000000c g       .entry	00000000 _exit
00000e34 g     F .text	00000004 alt_icache_flush_all
00001010 g     O .rwdata	00000004 alt_priority_mask
00000c3c g     F .text	00000038 alt_ic_irq_enable
00000d2c g     F .text	000000b4 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406014 	ori	at,at,384
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	000015c0 	call	15c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 10c:	04000034 	movhi	r16,0
 110:	84041104 	addi	r16,r16,4164
    i = 0;
 114:	0005883a 	mov	r2,zero
    mask = 1;
 118:	00c00044 	movi	r3,1
      if (active & mask)
 11c:	20ca703a 	and	r5,r4,r3
 120:	28000b26 	beq	r5,zero,150 <alt_irq_handler+0x54>
        alt_irq[i].handler(alt_irq[i].context); 
 124:	100490fa 	slli	r2,r2,3
 128:	8085883a 	add	r2,r16,r2
 12c:	10c00017 	ldw	r3,0(r2)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 140:	dfc00117 	ldw	ra,4(sp)
 144:	dc000017 	ldw	r16,0(sp)
 148:	dec00204 	addi	sp,sp,8
 14c:	f800283a 	ret
      mask <<= 1;
 150:	1806907a 	slli	r3,r3,1
      i++;
 154:	10800044 	addi	r2,r2,1
      if (active & mask)
 158:	003ff006 	br	11c <alt_irq_handler+0x20>

0000015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 15c:	d0a01017 	ldw	r2,-32704(gp)
{
 160:	200b883a 	mov	r5,r4
  if(alt_instruction_exception_handler) {
 164:	10000326 	beq	r2,zero,174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 168:	000d883a 	mov	r6,zero
 16c:	013fffc4 	movi	r4,-1
 170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 178:	0005883a 	mov	r2,zero
 17c:	f800283a 	ret

Disassembly of section .text:

00000180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 184:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
 188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 18c:	d6a40014 	ori	gp,gp,36864
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 194:	10840514 	ori	r2,r2,4116

    movhi r3, %hi(__bss_end)
 198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 19c:	18c45114 	ori	r3,r3,4420

    beq r2, r3, 1f
 1a0:	10c00326 	beq	r2,r3,1b0 <_start+0x30>

0:
    stw zero, (r2)
 1a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1ac:	10fffd36 	bltu	r2,r3,1a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1b0:	0000d2c0 	call	d2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1b4:	0000de00 	call	de0 <alt_main>

000001b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1b8:	003fff06 	br	1b8 <alt_after_alt_main>

000001bc <timer_isr>:
{

	(void) context; //ignore


	IOWR_ALTERA_AVALON_PIO_DATA(PIO_READY_RSA_FILTER_0_BASE, 3);
 1bc:	008000c4 	movi	r2,3
 1c0:	008c3035 	stwio	r2,12480(zero)
	if (display1 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 64);
 1c4:	d0a00b17 	ldw	r2,-32724(gp)
 1c8:	1000021e 	bne	r2,zero,1d4 <timer_isr+0x18>
 1cc:	00801004 	movi	r2,64
 1d0:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 121);
 1d4:	d0a00b17 	ldw	r2,-32724(gp)
 1d8:	10800058 	cmpnei	r2,r2,1
 1dc:	1000021e 	bne	r2,zero,1e8 <timer_isr+0x2c>
 1e0:	00801e44 	movi	r2,121
 1e4:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 36);
 1e8:	d0a00b17 	ldw	r2,-32724(gp)
 1ec:	10800098 	cmpnei	r2,r2,2
 1f0:	1000021e 	bne	r2,zero,1fc <timer_isr+0x40>
 1f4:	00800904 	movi	r2,36
 1f8:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 48);
 1fc:	d0a00b17 	ldw	r2,-32724(gp)
 200:	108000d8 	cmpnei	r2,r2,3
 204:	1000021e 	bne	r2,zero,210 <timer_isr+0x54>
 208:	00800c04 	movi	r2,48
 20c:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 25);
 210:	d0a00b17 	ldw	r2,-32724(gp)
 214:	10800118 	cmpnei	r2,r2,4
 218:	1000021e 	bne	r2,zero,224 <timer_isr+0x68>
 21c:	00800644 	movi	r2,25
 220:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 18);
 224:	d0a00b17 	ldw	r2,-32724(gp)
 228:	10800158 	cmpnei	r2,r2,5
 22c:	1000021e 	bne	r2,zero,238 <timer_isr+0x7c>
 230:	00800484 	movi	r2,18
 234:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 2);
 238:	d0a00b17 	ldw	r2,-32724(gp)
 23c:	10800198 	cmpnei	r2,r2,6
 240:	1000021e 	bne	r2,zero,24c <timer_isr+0x90>
 244:	00800084 	movi	r2,2
 248:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 120);
 24c:	d0a00b17 	ldw	r2,-32724(gp)
 250:	108001d8 	cmpnei	r2,r2,7
 254:	1000021e 	bne	r2,zero,260 <timer_isr+0xa4>
 258:	00801e04 	movi	r2,120
 25c:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 0);
 260:	d0a00b17 	ldw	r2,-32724(gp)
 264:	10800218 	cmpnei	r2,r2,8
 268:	1000011e 	bne	r2,zero,270 <timer_isr+0xb4>
 26c:	000c2835 	stwio	zero,12448(zero)
	if (display1 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 16);
 270:	d0a00b17 	ldw	r2,-32724(gp)
 274:	10800258 	cmpnei	r2,r2,9
 278:	1000021e 	bne	r2,zero,284 <timer_isr+0xc8>
 27c:	00800404 	movi	r2,16
 280:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 8);
 284:	d0a00b17 	ldw	r2,-32724(gp)
 288:	10800298 	cmpnei	r2,r2,10
 28c:	1000021e 	bne	r2,zero,298 <timer_isr+0xdc>
 290:	00800204 	movi	r2,8
 294:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 3);
 298:	d0a00b17 	ldw	r2,-32724(gp)
 29c:	108002d8 	cmpnei	r2,r2,11
 2a0:	1000021e 	bne	r2,zero,2ac <timer_isr+0xf0>
 2a4:	008000c4 	movi	r2,3
 2a8:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 70);
 2ac:	d0a00b17 	ldw	r2,-32724(gp)
 2b0:	10800318 	cmpnei	r2,r2,12
 2b4:	1000021e 	bne	r2,zero,2c0 <timer_isr+0x104>
 2b8:	00801184 	movi	r2,70
 2bc:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 33);
 2c0:	d0a00b17 	ldw	r2,-32724(gp)
 2c4:	10800358 	cmpnei	r2,r2,13
 2c8:	1000021e 	bne	r2,zero,2d4 <timer_isr+0x118>
 2cc:	00800844 	movi	r2,33
 2d0:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 6);
 2d4:	d0a00b17 	ldw	r2,-32724(gp)
 2d8:	10800398 	cmpnei	r2,r2,14
 2dc:	1000021e 	bne	r2,zero,2e8 <timer_isr+0x12c>
 2e0:	00800184 	movi	r2,6
 2e4:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 14);
 2e8:	d0a00b17 	ldw	r2,-32724(gp)
 2ec:	108003d8 	cmpnei	r2,r2,15
 2f0:	1000021e 	bne	r2,zero,2fc <timer_isr+0x140>
 2f4:	00800384 	movi	r2,14
 2f8:	008c2835 	stwio	r2,12448(zero)
	if (display1 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY1_0_BASE, 127);
 2fc:	d0a00b17 	ldw	r2,-32724(gp)
 300:	10800418 	cmpnei	r2,r2,16
 304:	1000021e 	bne	r2,zero,310 <timer_isr+0x154>
 308:	00801fc4 	movi	r2,127
 30c:	008c2835 	stwio	r2,12448(zero)
	if (display2 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 64);
 310:	d0a00a17 	ldw	r2,-32728(gp)
 314:	1000021e 	bne	r2,zero,320 <timer_isr+0x164>
 318:	00801004 	movi	r2,64
 31c:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 121);
 320:	d0a00a17 	ldw	r2,-32728(gp)
 324:	10800058 	cmpnei	r2,r2,1
 328:	1000021e 	bne	r2,zero,334 <timer_isr+0x178>
 32c:	00801e44 	movi	r2,121
 330:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 36);
 334:	d0a00a17 	ldw	r2,-32728(gp)
 338:	10800098 	cmpnei	r2,r2,2
 33c:	1000021e 	bne	r2,zero,348 <timer_isr+0x18c>
 340:	00800904 	movi	r2,36
 344:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 48);
 348:	d0a00a17 	ldw	r2,-32728(gp)
 34c:	108000d8 	cmpnei	r2,r2,3
 350:	1000021e 	bne	r2,zero,35c <timer_isr+0x1a0>
 354:	00800c04 	movi	r2,48
 358:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 25);
 35c:	d0a00a17 	ldw	r2,-32728(gp)
 360:	10800118 	cmpnei	r2,r2,4
 364:	1000021e 	bne	r2,zero,370 <timer_isr+0x1b4>
 368:	00800644 	movi	r2,25
 36c:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 18);
 370:	d0a00a17 	ldw	r2,-32728(gp)
 374:	10800158 	cmpnei	r2,r2,5
 378:	1000021e 	bne	r2,zero,384 <timer_isr+0x1c8>
 37c:	00800484 	movi	r2,18
 380:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 2);
 384:	d0a00a17 	ldw	r2,-32728(gp)
 388:	10800198 	cmpnei	r2,r2,6
 38c:	1000021e 	bne	r2,zero,398 <timer_isr+0x1dc>
 390:	00800084 	movi	r2,2
 394:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 120);
 398:	d0a00a17 	ldw	r2,-32728(gp)
 39c:	108001d8 	cmpnei	r2,r2,7
 3a0:	1000021e 	bne	r2,zero,3ac <timer_isr+0x1f0>
 3a4:	00801e04 	movi	r2,120
 3a8:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 0);
 3ac:	d0a00a17 	ldw	r2,-32728(gp)
 3b0:	10800218 	cmpnei	r2,r2,8
 3b4:	1000011e 	bne	r2,zero,3bc <timer_isr+0x200>
 3b8:	000c2435 	stwio	zero,12432(zero)
	if (display2 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 16);
 3bc:	d0a00a17 	ldw	r2,-32728(gp)
 3c0:	10800258 	cmpnei	r2,r2,9
 3c4:	1000021e 	bne	r2,zero,3d0 <timer_isr+0x214>
 3c8:	00800404 	movi	r2,16
 3cc:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 8);
 3d0:	d0a00a17 	ldw	r2,-32728(gp)
 3d4:	10800298 	cmpnei	r2,r2,10
 3d8:	1000021e 	bne	r2,zero,3e4 <timer_isr+0x228>
 3dc:	00800204 	movi	r2,8
 3e0:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 3);
 3e4:	d0a00a17 	ldw	r2,-32728(gp)
 3e8:	108002d8 	cmpnei	r2,r2,11
 3ec:	1000021e 	bne	r2,zero,3f8 <timer_isr+0x23c>
 3f0:	008000c4 	movi	r2,3
 3f4:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 70);
 3f8:	d0a00a17 	ldw	r2,-32728(gp)
 3fc:	10800318 	cmpnei	r2,r2,12
 400:	1000021e 	bne	r2,zero,40c <timer_isr+0x250>
 404:	00801184 	movi	r2,70
 408:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 33);
 40c:	d0a00a17 	ldw	r2,-32728(gp)
 410:	10800358 	cmpnei	r2,r2,13
 414:	1000021e 	bne	r2,zero,420 <timer_isr+0x264>
 418:	00800844 	movi	r2,33
 41c:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 6);
 420:	d0a00a17 	ldw	r2,-32728(gp)
 424:	10800398 	cmpnei	r2,r2,14
 428:	1000021e 	bne	r2,zero,434 <timer_isr+0x278>
 42c:	00800184 	movi	r2,6
 430:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 14);
 434:	d0a00a17 	ldw	r2,-32728(gp)
 438:	108003d8 	cmpnei	r2,r2,15
 43c:	1000021e 	bne	r2,zero,448 <timer_isr+0x28c>
 440:	00800384 	movi	r2,14
 444:	008c2435 	stwio	r2,12432(zero)
	if (display2 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY2_0_BASE, 127);
 448:	d0a00a17 	ldw	r2,-32728(gp)
 44c:	10800418 	cmpnei	r2,r2,16
 450:	1000021e 	bne	r2,zero,45c <timer_isr+0x2a0>
 454:	00801fc4 	movi	r2,127
 458:	008c2435 	stwio	r2,12432(zero)
	if (display3 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 64);
 45c:	d0a00917 	ldw	r2,-32732(gp)
 460:	1000021e 	bne	r2,zero,46c <timer_isr+0x2b0>
 464:	00801004 	movi	r2,64
 468:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 121);
 46c:	d0a00917 	ldw	r2,-32732(gp)
 470:	10800058 	cmpnei	r2,r2,1
 474:	1000021e 	bne	r2,zero,480 <timer_isr+0x2c4>
 478:	00801e44 	movi	r2,121
 47c:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 36);
 480:	d0a00917 	ldw	r2,-32732(gp)
 484:	10800098 	cmpnei	r2,r2,2
 488:	1000021e 	bne	r2,zero,494 <timer_isr+0x2d8>
 48c:	00800904 	movi	r2,36
 490:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 48);
 494:	d0a00917 	ldw	r2,-32732(gp)
 498:	108000d8 	cmpnei	r2,r2,3
 49c:	1000021e 	bne	r2,zero,4a8 <timer_isr+0x2ec>
 4a0:	00800c04 	movi	r2,48
 4a4:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 25);
 4a8:	d0a00917 	ldw	r2,-32732(gp)
 4ac:	10800118 	cmpnei	r2,r2,4
 4b0:	1000021e 	bne	r2,zero,4bc <timer_isr+0x300>
 4b4:	00800644 	movi	r2,25
 4b8:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 18);
 4bc:	d0a00917 	ldw	r2,-32732(gp)
 4c0:	10800158 	cmpnei	r2,r2,5
 4c4:	1000021e 	bne	r2,zero,4d0 <timer_isr+0x314>
 4c8:	00800484 	movi	r2,18
 4cc:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 2);
 4d0:	d0a00917 	ldw	r2,-32732(gp)
 4d4:	10800198 	cmpnei	r2,r2,6
 4d8:	1000021e 	bne	r2,zero,4e4 <timer_isr+0x328>
 4dc:	00800084 	movi	r2,2
 4e0:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 120);
 4e4:	d0a00917 	ldw	r2,-32732(gp)
 4e8:	108001d8 	cmpnei	r2,r2,7
 4ec:	1000021e 	bne	r2,zero,4f8 <timer_isr+0x33c>
 4f0:	00801e04 	movi	r2,120
 4f4:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 0);
 4f8:	d0a00917 	ldw	r2,-32732(gp)
 4fc:	10800218 	cmpnei	r2,r2,8
 500:	1000011e 	bne	r2,zero,508 <timer_isr+0x34c>
 504:	000c2035 	stwio	zero,12416(zero)
	if (display3 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 16);
 508:	d0a00917 	ldw	r2,-32732(gp)
 50c:	10800258 	cmpnei	r2,r2,9
 510:	1000021e 	bne	r2,zero,51c <timer_isr+0x360>
 514:	00800404 	movi	r2,16
 518:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 8);
 51c:	d0a00917 	ldw	r2,-32732(gp)
 520:	10800298 	cmpnei	r2,r2,10
 524:	1000021e 	bne	r2,zero,530 <timer_isr+0x374>
 528:	00800204 	movi	r2,8
 52c:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 3);
 530:	d0a00917 	ldw	r2,-32732(gp)
 534:	108002d8 	cmpnei	r2,r2,11
 538:	1000021e 	bne	r2,zero,544 <timer_isr+0x388>
 53c:	008000c4 	movi	r2,3
 540:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 70);
 544:	d0a00917 	ldw	r2,-32732(gp)
 548:	10800318 	cmpnei	r2,r2,12
 54c:	1000021e 	bne	r2,zero,558 <timer_isr+0x39c>
 550:	00801184 	movi	r2,70
 554:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 33);
 558:	d0a00917 	ldw	r2,-32732(gp)
 55c:	10800358 	cmpnei	r2,r2,13
 560:	1000021e 	bne	r2,zero,56c <timer_isr+0x3b0>
 564:	00800844 	movi	r2,33
 568:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 6);
 56c:	d0a00917 	ldw	r2,-32732(gp)
 570:	10800398 	cmpnei	r2,r2,14
 574:	1000021e 	bne	r2,zero,580 <timer_isr+0x3c4>
 578:	00800184 	movi	r2,6
 57c:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 14);
 580:	d0a00917 	ldw	r2,-32732(gp)
 584:	108003d8 	cmpnei	r2,r2,15
 588:	1000021e 	bne	r2,zero,594 <timer_isr+0x3d8>
 58c:	00800384 	movi	r2,14
 590:	008c2035 	stwio	r2,12416(zero)
	if (display3 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY3_0_BASE, 127);
 594:	d0a00917 	ldw	r2,-32732(gp)
 598:	10800418 	cmpnei	r2,r2,16
 59c:	1000021e 	bne	r2,zero,5a8 <timer_isr+0x3ec>
 5a0:	00801fc4 	movi	r2,127
 5a4:	008c2035 	stwio	r2,12416(zero)
	if (display4 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 64);
 5a8:	d0a00817 	ldw	r2,-32736(gp)
 5ac:	1000021e 	bne	r2,zero,5b8 <timer_isr+0x3fc>
 5b0:	00801004 	movi	r2,64
 5b4:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 121);
 5b8:	d0a00817 	ldw	r2,-32736(gp)
 5bc:	10800058 	cmpnei	r2,r2,1
 5c0:	1000021e 	bne	r2,zero,5cc <timer_isr+0x410>
 5c4:	00801e44 	movi	r2,121
 5c8:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 36);
 5cc:	d0a00817 	ldw	r2,-32736(gp)
 5d0:	10800098 	cmpnei	r2,r2,2
 5d4:	1000021e 	bne	r2,zero,5e0 <timer_isr+0x424>
 5d8:	00800904 	movi	r2,36
 5dc:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 48);
 5e0:	d0a00817 	ldw	r2,-32736(gp)
 5e4:	108000d8 	cmpnei	r2,r2,3
 5e8:	1000021e 	bne	r2,zero,5f4 <timer_isr+0x438>
 5ec:	00800c04 	movi	r2,48
 5f0:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 25);
 5f4:	d0a00817 	ldw	r2,-32736(gp)
 5f8:	10800118 	cmpnei	r2,r2,4
 5fc:	1000021e 	bne	r2,zero,608 <timer_isr+0x44c>
 600:	00800644 	movi	r2,25
 604:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 18);
 608:	d0a00817 	ldw	r2,-32736(gp)
 60c:	10800158 	cmpnei	r2,r2,5
 610:	1000021e 	bne	r2,zero,61c <timer_isr+0x460>
 614:	00800484 	movi	r2,18
 618:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 2);
 61c:	d0a00817 	ldw	r2,-32736(gp)
 620:	10800198 	cmpnei	r2,r2,6
 624:	1000021e 	bne	r2,zero,630 <timer_isr+0x474>
 628:	00800084 	movi	r2,2
 62c:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 120);
 630:	d0a00817 	ldw	r2,-32736(gp)
 634:	108001d8 	cmpnei	r2,r2,7
 638:	1000021e 	bne	r2,zero,644 <timer_isr+0x488>
 63c:	00801e04 	movi	r2,120
 640:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 0);
 644:	d0a00817 	ldw	r2,-32736(gp)
 648:	10800218 	cmpnei	r2,r2,8
 64c:	1000011e 	bne	r2,zero,654 <timer_isr+0x498>
 650:	000c1c35 	stwio	zero,12400(zero)
	if (display4 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 16);
 654:	d0a00817 	ldw	r2,-32736(gp)
 658:	10800258 	cmpnei	r2,r2,9
 65c:	1000021e 	bne	r2,zero,668 <timer_isr+0x4ac>
 660:	00800404 	movi	r2,16
 664:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 8);
 668:	d0a00817 	ldw	r2,-32736(gp)
 66c:	10800298 	cmpnei	r2,r2,10
 670:	1000021e 	bne	r2,zero,67c <timer_isr+0x4c0>
 674:	00800204 	movi	r2,8
 678:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 3);
 67c:	d0a00817 	ldw	r2,-32736(gp)
 680:	108002d8 	cmpnei	r2,r2,11
 684:	1000021e 	bne	r2,zero,690 <timer_isr+0x4d4>
 688:	008000c4 	movi	r2,3
 68c:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 70);
 690:	d0a00817 	ldw	r2,-32736(gp)
 694:	10800318 	cmpnei	r2,r2,12
 698:	1000021e 	bne	r2,zero,6a4 <timer_isr+0x4e8>
 69c:	00801184 	movi	r2,70
 6a0:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 33);
 6a4:	d0a00817 	ldw	r2,-32736(gp)
 6a8:	10800358 	cmpnei	r2,r2,13
 6ac:	1000021e 	bne	r2,zero,6b8 <timer_isr+0x4fc>
 6b0:	00800844 	movi	r2,33
 6b4:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 6);
 6b8:	d0a00817 	ldw	r2,-32736(gp)
 6bc:	10800398 	cmpnei	r2,r2,14
 6c0:	1000021e 	bne	r2,zero,6cc <timer_isr+0x510>
 6c4:	00800184 	movi	r2,6
 6c8:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 14);
 6cc:	d0a00817 	ldw	r2,-32736(gp)
 6d0:	108003d8 	cmpnei	r2,r2,15
 6d4:	1000021e 	bne	r2,zero,6e0 <timer_isr+0x524>
 6d8:	00800384 	movi	r2,14
 6dc:	008c1c35 	stwio	r2,12400(zero)
	if (display4 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY4_0_BASE, 127);
 6e0:	d0a00817 	ldw	r2,-32736(gp)
 6e4:	10800418 	cmpnei	r2,r2,16
 6e8:	1000021e 	bne	r2,zero,6f4 <timer_isr+0x538>
 6ec:	00801fc4 	movi	r2,127
 6f0:	008c1c35 	stwio	r2,12400(zero)
	if (display5 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 64);
 6f4:	d0a00717 	ldw	r2,-32740(gp)
 6f8:	1000021e 	bne	r2,zero,704 <timer_isr+0x548>
 6fc:	00801004 	movi	r2,64
 700:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 121);
 704:	d0a00717 	ldw	r2,-32740(gp)
 708:	10800058 	cmpnei	r2,r2,1
 70c:	1000021e 	bne	r2,zero,718 <timer_isr+0x55c>
 710:	00801e44 	movi	r2,121
 714:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 36);
 718:	d0a00717 	ldw	r2,-32740(gp)
 71c:	10800098 	cmpnei	r2,r2,2
 720:	1000021e 	bne	r2,zero,72c <timer_isr+0x570>
 724:	00800904 	movi	r2,36
 728:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 48);
 72c:	d0a00717 	ldw	r2,-32740(gp)
 730:	108000d8 	cmpnei	r2,r2,3
 734:	1000021e 	bne	r2,zero,740 <timer_isr+0x584>
 738:	00800c04 	movi	r2,48
 73c:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 25);
 740:	d0a00717 	ldw	r2,-32740(gp)
 744:	10800118 	cmpnei	r2,r2,4
 748:	1000021e 	bne	r2,zero,754 <timer_isr+0x598>
 74c:	00800644 	movi	r2,25
 750:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 18);
 754:	d0a00717 	ldw	r2,-32740(gp)
 758:	10800158 	cmpnei	r2,r2,5
 75c:	1000021e 	bne	r2,zero,768 <timer_isr+0x5ac>
 760:	00800484 	movi	r2,18
 764:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 2);
 768:	d0a00717 	ldw	r2,-32740(gp)
 76c:	10800198 	cmpnei	r2,r2,6
 770:	1000021e 	bne	r2,zero,77c <timer_isr+0x5c0>
 774:	00800084 	movi	r2,2
 778:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 120);
 77c:	d0a00717 	ldw	r2,-32740(gp)
 780:	108001d8 	cmpnei	r2,r2,7
 784:	1000021e 	bne	r2,zero,790 <timer_isr+0x5d4>
 788:	00801e04 	movi	r2,120
 78c:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 0);
 790:	d0a00717 	ldw	r2,-32740(gp)
 794:	10800218 	cmpnei	r2,r2,8
 798:	1000011e 	bne	r2,zero,7a0 <timer_isr+0x5e4>
 79c:	000c1835 	stwio	zero,12384(zero)
	if (display5 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 16);
 7a0:	d0a00717 	ldw	r2,-32740(gp)
 7a4:	10800258 	cmpnei	r2,r2,9
 7a8:	1000021e 	bne	r2,zero,7b4 <timer_isr+0x5f8>
 7ac:	00800404 	movi	r2,16
 7b0:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 8);
 7b4:	d0a00717 	ldw	r2,-32740(gp)
 7b8:	10800298 	cmpnei	r2,r2,10
 7bc:	1000021e 	bne	r2,zero,7c8 <timer_isr+0x60c>
 7c0:	00800204 	movi	r2,8
 7c4:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 3);
 7c8:	d0a00717 	ldw	r2,-32740(gp)
 7cc:	108002d8 	cmpnei	r2,r2,11
 7d0:	1000021e 	bne	r2,zero,7dc <timer_isr+0x620>
 7d4:	008000c4 	movi	r2,3
 7d8:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 70);
 7dc:	d0a00717 	ldw	r2,-32740(gp)
 7e0:	10800318 	cmpnei	r2,r2,12
 7e4:	1000021e 	bne	r2,zero,7f0 <timer_isr+0x634>
 7e8:	00801184 	movi	r2,70
 7ec:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 33);
 7f0:	d0a00717 	ldw	r2,-32740(gp)
 7f4:	10800358 	cmpnei	r2,r2,13
 7f8:	1000021e 	bne	r2,zero,804 <timer_isr+0x648>
 7fc:	00800844 	movi	r2,33
 800:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 6);
 804:	d0a00717 	ldw	r2,-32740(gp)
 808:	10800398 	cmpnei	r2,r2,14
 80c:	1000021e 	bne	r2,zero,818 <timer_isr+0x65c>
 810:	00800184 	movi	r2,6
 814:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 14);
 818:	d0a00717 	ldw	r2,-32740(gp)
 81c:	108003d8 	cmpnei	r2,r2,15
 820:	1000021e 	bne	r2,zero,82c <timer_isr+0x670>
 824:	00800384 	movi	r2,14
 828:	008c1835 	stwio	r2,12384(zero)
	if (display5 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY5_0_BASE, 127);
 82c:	d0a00717 	ldw	r2,-32740(gp)
 830:	10800418 	cmpnei	r2,r2,16
 834:	1000021e 	bne	r2,zero,840 <timer_isr+0x684>
 838:	00801fc4 	movi	r2,127
 83c:	008c1835 	stwio	r2,12384(zero)
	if (display6 == 0) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 64);
 840:	d0a00617 	ldw	r2,-32744(gp)
 844:	1000021e 	bne	r2,zero,850 <timer_isr+0x694>
 848:	00801004 	movi	r2,64
 84c:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 1) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 121);
 850:	d0a00617 	ldw	r2,-32744(gp)
 854:	10800058 	cmpnei	r2,r2,1
 858:	1000021e 	bne	r2,zero,864 <timer_isr+0x6a8>
 85c:	00801e44 	movi	r2,121
 860:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 2) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 36);
 864:	d0a00617 	ldw	r2,-32744(gp)
 868:	10800098 	cmpnei	r2,r2,2
 86c:	1000021e 	bne	r2,zero,878 <timer_isr+0x6bc>
 870:	00800904 	movi	r2,36
 874:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 3) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 48);
 878:	d0a00617 	ldw	r2,-32744(gp)
 87c:	108000d8 	cmpnei	r2,r2,3
 880:	1000021e 	bne	r2,zero,88c <timer_isr+0x6d0>
 884:	00800c04 	movi	r2,48
 888:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 4) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 25);
 88c:	d0a00617 	ldw	r2,-32744(gp)
 890:	10800118 	cmpnei	r2,r2,4
 894:	1000021e 	bne	r2,zero,8a0 <timer_isr+0x6e4>
 898:	00800644 	movi	r2,25
 89c:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 5) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 18);
 8a0:	d0a00617 	ldw	r2,-32744(gp)
 8a4:	10800158 	cmpnei	r2,r2,5
 8a8:	1000021e 	bne	r2,zero,8b4 <timer_isr+0x6f8>
 8ac:	00800484 	movi	r2,18
 8b0:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 6) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 2);
 8b4:	d0a00617 	ldw	r2,-32744(gp)
 8b8:	10800198 	cmpnei	r2,r2,6
 8bc:	1000021e 	bne	r2,zero,8c8 <timer_isr+0x70c>
 8c0:	00800084 	movi	r2,2
 8c4:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 7) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 120);
 8c8:	d0a00617 	ldw	r2,-32744(gp)
 8cc:	108001d8 	cmpnei	r2,r2,7
 8d0:	1000021e 	bne	r2,zero,8dc <timer_isr+0x720>
 8d4:	00801e04 	movi	r2,120
 8d8:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 8) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 0);
 8dc:	d0a00617 	ldw	r2,-32744(gp)
 8e0:	10800218 	cmpnei	r2,r2,8
 8e4:	1000011e 	bne	r2,zero,8ec <timer_isr+0x730>
 8e8:	000c1435 	stwio	zero,12368(zero)
	if (display6 == 9) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 16);
 8ec:	d0a00617 	ldw	r2,-32744(gp)
 8f0:	10800258 	cmpnei	r2,r2,9
 8f4:	1000021e 	bne	r2,zero,900 <timer_isr+0x744>
 8f8:	00800404 	movi	r2,16
 8fc:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 10) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 8);
 900:	d0a00617 	ldw	r2,-32744(gp)
 904:	10800298 	cmpnei	r2,r2,10
 908:	1000021e 	bne	r2,zero,914 <timer_isr+0x758>
 90c:	00800204 	movi	r2,8
 910:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 11) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 3);
 914:	d0a00617 	ldw	r2,-32744(gp)
 918:	108002d8 	cmpnei	r2,r2,11
 91c:	1000021e 	bne	r2,zero,928 <timer_isr+0x76c>
 920:	008000c4 	movi	r2,3
 924:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 12) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 70);
 928:	d0a00617 	ldw	r2,-32744(gp)
 92c:	10800318 	cmpnei	r2,r2,12
 930:	1000021e 	bne	r2,zero,93c <timer_isr+0x780>
 934:	00801184 	movi	r2,70
 938:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 13) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 33);
 93c:	d0a00617 	ldw	r2,-32744(gp)
 940:	10800358 	cmpnei	r2,r2,13
 944:	1000021e 	bne	r2,zero,950 <timer_isr+0x794>
 948:	00800844 	movi	r2,33
 94c:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 14) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 6);
 950:	d0a00617 	ldw	r2,-32744(gp)
 954:	10800398 	cmpnei	r2,r2,14
 958:	1000021e 	bne	r2,zero,964 <timer_isr+0x7a8>
 95c:	00800184 	movi	r2,6
 960:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 15) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 14);
 964:	d0a00617 	ldw	r2,-32744(gp)
 968:	108003d8 	cmpnei	r2,r2,15
 96c:	1000021e 	bne	r2,zero,978 <timer_isr+0x7bc>
 970:	00800384 	movi	r2,14
 974:	008c1435 	stwio	r2,12368(zero)
	if (display6 == 16) IOWR_ALTERA_AVALON_PIO_DATA(PIO_DISPLAY6_0_BASE, 127);
 978:	d0a00617 	ldw	r2,-32744(gp)
 97c:	10800418 	cmpnei	r2,r2,16
 980:	1000021e 	bne	r2,zero,98c <timer_isr+0x7d0>
 984:	00801fc4 	movi	r2,127
 988:	008c1435 	stwio	r2,12368(zero)
	btnleftright = IORD_ALTERA_AVALON_PIO_DATA(PIO_LEFT_RIGHT_0_BASE);
 98c:	008c0c37 	ldwio	r2,12336(zero)
	if((btnleftright != lastbtnleftright) && ((btnleftright == 2)|| (btnleftright == 1))){
 990:	d0e00217 	ldw	r3,-32760(gp)
 994:	10c03226 	beq	r2,r3,a60 <timer_isr+0x8a4>
 998:	10ffffc4 	addi	r3,r2,-1
 99c:	18c000a8 	cmpgeui	r3,r3,2
 9a0:	18002f1e 	bne	r3,zero,a60 <timer_isr+0x8a4>
		lastbtnleftright = btnleftright;
 9a4:	d0a00215 	stw	r2,-32760(gp)
		if((btnleftright == 1) && (display_selector >= 1)){
 9a8:	10800058 	cmpnei	r2,r2,1
 9ac:	1000271e 	bne	r2,zero,a4c <timer_isr+0x890>
 9b0:	d0a00517 	ldw	r2,-32748(gp)
 9b4:	10000226 	beq	r2,zero,9c0 <timer_isr+0x804>
			display_selector--;
 9b8:	10bfffc4 	addi	r2,r2,-1
			display_selector++;
 9bc:	d0a00515 	stw	r2,-32748(gp)
	btnupdown = IORD_ALTERA_AVALON_PIO_DATA(PIO_UP_DOWN_0_BASE);
 9c0:	00cc0837 	ldwio	r3,12320(zero)
	if((btnupdown != lastbtnupdown) && ((btnupdown == 2)|| (btnupdown == 1))){
 9c4:	d0a00017 	ldw	r2,-32768(gp)
	btnupdown = IORD_ALTERA_AVALON_PIO_DATA(PIO_UP_DOWN_0_BASE);
 9c8:	d0e00115 	stw	r3,-32764(gp)
	if((btnupdown != lastbtnupdown) && ((btnupdown == 2)|| (btnupdown == 1))){
 9cc:	18804b26 	beq	r3,r2,afc <timer_isr+0x940>
 9d0:	18bfffc4 	addi	r2,r3,-1
 9d4:	108000a8 	cmpgeui	r2,r2,2
 9d8:	1000481e 	bne	r2,zero,afc <timer_isr+0x940>
		lastbtnupdown = btnupdown;
 9dc:	d0e00015 	stw	r3,-32768(gp)
		if(btnupdown == 1){
 9e0:	18c00058 	cmpnei	r3,r3,1
 9e4:	d0a00517 	ldw	r2,-32748(gp)
 9e8:	18002f1e 	bne	r3,zero,aa8 <timer_isr+0x8ec>
	if((display_selector == 0) && (display1 >= 1)){
 9ec:	1000201e 	bne	r2,zero,a70 <timer_isr+0x8b4>
 9f0:	d0a00b17 	ldw	r2,-32724(gp)
 9f4:	10000226 	beq	r2,zero,a00 <timer_isr+0x844>
		display1--;
 9f8:	10bfffc4 	addi	r2,r2,-1
		display1++;
 9fc:	d0a00b15 	stw	r2,-32724(gp)
	continue0 = IORD_ALTERA_AVALON_PIO_DATA(PIO_SWITCH_0_BASE);
 a00:	008c2c37 	ldwio	r2,12464(zero)
	if(continue0 == 1){
 a04:	10800058 	cmpnei	r2,r2,1
 a08:	1000401e 	bne	r2,zero,b0c <timer_isr+0x950>
		display4 = display1;
 a0c:	d0a00b17 	ldw	r2,-32724(gp)
 a10:	d0a00815 	stw	r2,-32736(gp)
		display5 = display2;
 a14:	d0a00a17 	ldw	r2,-32728(gp)
 a18:	d0a00715 	stw	r2,-32740(gp)
		display6 = display3;
 a1c:	d0a00917 	ldw	r2,-32732(gp)
 a20:	d0a00615 	stw	r2,-32744(gp)
	if(display_selector == 0){
 a24:	d0a00517 	ldw	r2,-32748(gp)
 a28:	1000401e 	bne	r2,zero,b2c <timer_isr+0x970>
		if(temp_display == 16){
 a2c:	d0a00317 	ldw	r2,-32756(gp)
 a30:	10c00418 	cmpnei	r3,r2,16
 a34:	1800391e 	bne	r3,zero,b1c <timer_isr+0x960>
			temp_display = display1;
 a38:	d0e00b17 	ldw	r3,-32724(gp)
			display1 = 16;
 a3c:	d0a00b15 	stw	r2,-32724(gp)
			temp_display = display1;
 a40:	d0e00315 	stw	r3,-32756(gp)
	verify_continue();
	show_current_display();
	//verify_reset();

	// Clean timer status
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 a44:	000c0035 	stwio	zero,12288(zero)
}
 a48:	f800283a 	ret
		}else if((btnleftright == 2) && (display_selector <= 4)){
 a4c:	d0a00517 	ldw	r2,-32748(gp)
 a50:	10c00168 	cmpgeui	r3,r2,5
 a54:	183fda1e 	bne	r3,zero,9c0 <timer_isr+0x804>
			display_selector++;
 a58:	10800044 	addi	r2,r2,1
 a5c:	003fd706 	br	9bc <timer_isr+0x800>
	}if(btnleftright == 3){
 a60:	10c000d8 	cmpnei	r3,r2,3
 a64:	183fd61e 	bne	r3,zero,9c0 <timer_isr+0x804>
		lastbtnleftright = 3;
 a68:	d0a00215 	stw	r2,-32760(gp)
 a6c:	003fd406 	br	9c0 <timer_isr+0x804>
	}else if((display_selector == 1) && (display2 >= 1)){
 a70:	10c00058 	cmpnei	r3,r2,1
 a74:	1800051e 	bne	r3,zero,a8c <timer_isr+0x8d0>
 a78:	d0a00a17 	ldw	r2,-32728(gp)
 a7c:	103fe026 	beq	r2,zero,a00 <timer_isr+0x844>
		display2--;
 a80:	10bfffc4 	addi	r2,r2,-1
		display2++;
 a84:	d0a00a15 	stw	r2,-32728(gp)
 a88:	003fdd06 	br	a00 <timer_isr+0x844>
	}else if((display_selector == 2) && (display3 >= 1)){
 a8c:	10c00098 	cmpnei	r3,r2,2
 a90:	1800191e 	bne	r3,zero,af8 <timer_isr+0x93c>
 a94:	d0a00917 	ldw	r2,-32732(gp)
 a98:	103fd926 	beq	r2,zero,a00 <timer_isr+0x844>
		display3--;
 a9c:	10bfffc4 	addi	r2,r2,-1
		display3++;
 aa0:	d0a00915 	stw	r2,-32732(gp)
 aa4:	003fd606 	br	a00 <timer_isr+0x844>
	if((display_selector == 0) && (display1 <= 14)){
 aa8:	1000051e 	bne	r2,zero,ac0 <timer_isr+0x904>
 aac:	d0a00b17 	ldw	r2,-32724(gp)
 ab0:	10c003e8 	cmpgeui	r3,r2,15
 ab4:	183fd21e 	bne	r3,zero,a00 <timer_isr+0x844>
		display1++;
 ab8:	10800044 	addi	r2,r2,1
 abc:	003fcf06 	br	9fc <timer_isr+0x840>
	}else if((display_selector == 1) && (display2 <= 14)){
 ac0:	10c00058 	cmpnei	r3,r2,1
 ac4:	1800051e 	bne	r3,zero,adc <timer_isr+0x920>
 ac8:	d0a00a17 	ldw	r2,-32728(gp)
 acc:	10c003e8 	cmpgeui	r3,r2,15
 ad0:	183fcb1e 	bne	r3,zero,a00 <timer_isr+0x844>
		display2++;
 ad4:	10800044 	addi	r2,r2,1
 ad8:	003fea06 	br	a84 <timer_isr+0x8c8>
	}else if((display_selector == 2) && (display3 <= 14)){
 adc:	10c00098 	cmpnei	r3,r2,2
 ae0:	1800051e 	bne	r3,zero,af8 <timer_isr+0x93c>
 ae4:	d0a00917 	ldw	r2,-32732(gp)
 ae8:	10c003e8 	cmpgeui	r3,r2,15
 aec:	183fc41e 	bne	r3,zero,a00 <timer_isr+0x844>
		display3++;
 af0:	10800044 	addi	r2,r2,1
 af4:	003fea06 	br	aa0 <timer_isr+0x8e4>
	}else if((display_selector == 3) && (display4 <= 14)){
 af8:	003fc106 	br	a00 <timer_isr+0x844>
	}if(btnupdown == 3){
 afc:	188000d8 	cmpnei	r2,r3,3
 b00:	103fbf1e 	bne	r2,zero,a00 <timer_isr+0x844>
		lastbtnupdown = 3;
 b04:	d0e00015 	stw	r3,-32768(gp)
 b08:	003fbd06 	br	a00 <timer_isr+0x844>
		display4 = 0;
 b0c:	d0200815 	stw	zero,-32736(gp)
		display5 = 0;
 b10:	d0200715 	stw	zero,-32740(gp)
		display6 = 0;
 b14:	d0200615 	stw	zero,-32744(gp)
 b18:	003fc206 	br	a24 <timer_isr+0x868>
			display1 = temp_display;
 b1c:	d0a00b15 	stw	r2,-32724(gp)
			temp_display = 16;
 b20:	00800404 	movi	r2,16
 b24:	d0a00315 	stw	r2,-32756(gp)
 b28:	003fc606 	br	a44 <timer_isr+0x888>
	}else if(display_selector == 1){
 b2c:	10c00058 	cmpnei	r3,r2,1
 b30:	1800091e 	bne	r3,zero,b58 <timer_isr+0x99c>
		if(temp_display == 16){
 b34:	d0a00317 	ldw	r2,-32756(gp)
 b38:	10c00418 	cmpnei	r3,r2,16
 b3c:	1800041e 	bne	r3,zero,b50 <timer_isr+0x994>
			temp_display = display2;
 b40:	d0e00a17 	ldw	r3,-32728(gp)
			display2 = 16;
 b44:	d0a00a15 	stw	r2,-32728(gp)
			temp_display = display2;
 b48:	d0e00315 	stw	r3,-32756(gp)
			display2 = 16;
 b4c:	003fbd06 	br	a44 <timer_isr+0x888>
			display2 = temp_display;
 b50:	d0a00a15 	stw	r2,-32728(gp)
			temp_display = 16;
 b54:	003ff206 	br	b20 <timer_isr+0x964>
	}else if(display_selector == 2){
 b58:	10c00098 	cmpnei	r3,r2,2
 b5c:	1800091e 	bne	r3,zero,b84 <timer_isr+0x9c8>
		if(temp_display == 16){
 b60:	d0a00317 	ldw	r2,-32756(gp)
 b64:	10c00418 	cmpnei	r3,r2,16
 b68:	1800041e 	bne	r3,zero,b7c <timer_isr+0x9c0>
			temp_display = display3;
 b6c:	d0e00917 	ldw	r3,-32732(gp)
			display3 = 16;
 b70:	d0a00915 	stw	r2,-32732(gp)
			temp_display = display3;
 b74:	d0e00315 	stw	r3,-32756(gp)
			display3 = 16;
 b78:	003fb206 	br	a44 <timer_isr+0x888>
			display3 = temp_display;
 b7c:	d0a00915 	stw	r2,-32732(gp)
			temp_display = 16;
 b80:	003fe706 	br	b20 <timer_isr+0x964>
	}else if(display_selector == 3){
 b84:	10c000d8 	cmpnei	r3,r2,3
 b88:	1800091e 	bne	r3,zero,bb0 <timer_isr+0x9f4>
		if(temp_display == 16){
 b8c:	d0a00317 	ldw	r2,-32756(gp)
 b90:	10c00418 	cmpnei	r3,r2,16
 b94:	1800041e 	bne	r3,zero,ba8 <timer_isr+0x9ec>
			temp_display = display4;
 b98:	d0e00817 	ldw	r3,-32736(gp)
			display4 = 16;
 b9c:	d0a00815 	stw	r2,-32736(gp)
			temp_display = display4;
 ba0:	d0e00315 	stw	r3,-32756(gp)
			display4 = 16;
 ba4:	003fa706 	br	a44 <timer_isr+0x888>
			display4 = temp_display;
 ba8:	d0a00815 	stw	r2,-32736(gp)
			temp_display = 16;
 bac:	003fdc06 	br	b20 <timer_isr+0x964>
	}else if(display_selector == 4){
 bb0:	10c00118 	cmpnei	r3,r2,4
 bb4:	1800091e 	bne	r3,zero,bdc <timer_isr+0xa20>
		if(temp_display == 16){
 bb8:	d0a00317 	ldw	r2,-32756(gp)
 bbc:	10c00418 	cmpnei	r3,r2,16
 bc0:	1800041e 	bne	r3,zero,bd4 <timer_isr+0xa18>
			temp_display = display5;
 bc4:	d0e00717 	ldw	r3,-32740(gp)
			display5 = 16;
 bc8:	d0a00715 	stw	r2,-32740(gp)
			temp_display = display5;
 bcc:	d0e00315 	stw	r3,-32756(gp)
			display5 = 16;
 bd0:	003f9c06 	br	a44 <timer_isr+0x888>
			display5 = temp_display;
 bd4:	d0a00715 	stw	r2,-32740(gp)
			temp_display = 16;
 bd8:	003fd106 	br	b20 <timer_isr+0x964>
	}else if(display_selector == 5){
 bdc:	10800158 	cmpnei	r2,r2,5
 be0:	103f981e 	bne	r2,zero,a44 <timer_isr+0x888>
		if(temp_display == 16){
 be4:	d0a00317 	ldw	r2,-32756(gp)
 be8:	10c00418 	cmpnei	r3,r2,16
 bec:	1800041e 	bne	r3,zero,c00 <timer_isr+0xa44>
			temp_display = display6;
 bf0:	d0e00617 	ldw	r3,-32744(gp)
			display6 = 16;
 bf4:	d0a00615 	stw	r2,-32744(gp)
			temp_display = display6;
 bf8:	d0e00315 	stw	r3,-32756(gp)
			display6 = 16;
 bfc:	003f9106 	br	a44 <timer_isr+0x888>
			display6 = temp_display;
 c00:	d0a00615 	stw	r2,-32744(gp)
 c04:	003fc606 	br	b20 <timer_isr+0x964>

00000c08 <main>:

int main()
{
 c08:	defffe04 	addi	sp,sp,-8
	//Assign IRQ signal with ISR
	alt_ic_isr_register(
 c0c:	01800034 	movhi	r6,0
 c10:	d8000015 	stw	zero,0(sp)
 c14:	000f883a 	mov	r7,zero
 c18:	31806f04 	addi	r6,r6,444
 c1c:	000b883a 	mov	r5,zero
 c20:	0009883a 	mov	r4,zero
{
 c24:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(
 c28:	0000c380 	call	c38 <alt_ic_isr_register>
			timer_isr,
			NULL,
			NULL);

	//Enable periodic IRQS generated by timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(
 c2c:	008000c4 	movi	r2,3
 c30:	008c0135 	stwio	r2,12292(zero)
			TIMER_0_BASE,
			  ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
			| ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);

	while (1);
 c34:	003fff06 	br	c34 <main+0x2c>

00000c38 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 c38:	0000cc41 	jmpi	cc4 <alt_iic_isr_register>

00000c3c <alt_ic_irq_enable>:
  NIOS2_READ_STATUS (context);
 c3c:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c40:	00bfff84 	movi	r2,-2
 c44:	1884703a 	and	r2,r3,r2
 c48:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 c4c:	00800044 	movi	r2,1
 c50:	d1200c17 	ldw	r4,-32720(gp)
 c54:	114a983a 	sll	r5,r2,r5
 c58:	290ab03a 	or	r5,r5,r4
 c5c:	d1600c15 	stw	r5,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c60:	d0a00c17 	ldw	r2,-32720(gp)
 c64:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 c68:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 c6c:	0005883a 	mov	r2,zero
 c70:	f800283a 	ret

00000c74 <alt_ic_irq_disable>:
  NIOS2_READ_STATUS (context);
 c74:	0007303a 	rdctl	r3,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c78:	00bfff84 	movi	r2,-2
 c7c:	1884703a 	and	r2,r3,r2
 c80:	1001703a 	wrctl	status,r2
  alt_irq_active &= ~(1 << id);
 c84:	00bfff84 	movi	r2,-2
 c88:	d1200c17 	ldw	r4,-32720(gp)
 c8c:	114a183a 	rol	r5,r2,r5
 c90:	290a703a 	and	r5,r5,r4
 c94:	d1600c15 	stw	r5,-32720(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c98:	d0a00c17 	ldw	r2,-32720(gp)
 c9c:	100170fa 	wrctl	ienable,r2
  NIOS2_WRITE_STATUS (context);
 ca0:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 ca4:	0005883a 	mov	r2,zero
 ca8:	f800283a 	ret

00000cac <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 cac:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 cb0:	00800044 	movi	r2,1
 cb4:	1144983a 	sll	r2,r2,r5
 cb8:	10c4703a 	and	r2,r2,r3
}
 cbc:	1004c03a 	cmpne	r2,r2,zero
 cc0:	f800283a 	ret

00000cc4 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 cc4:	28800808 	cmpgei	r2,r5,32
 cc8:	1000161e 	bne	r2,zero,d24 <alt_iic_isr_register+0x60>
{
 ccc:	defffe04 	addi	sp,sp,-8
 cd0:	dfc00115 	stw	ra,4(sp)
 cd4:	dc000015 	stw	r16,0(sp)
  NIOS2_READ_STATUS (context);
 cd8:	0021303a 	rdctl	r16,status
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 cdc:	00bfff84 	movi	r2,-2
 ce0:	8084703a 	and	r2,r16,r2
 ce4:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 ce8:	280690fa 	slli	r3,r5,3
 cec:	00800034 	movhi	r2,0
 cf0:	10841104 	addi	r2,r2,4164
 cf4:	10c5883a 	add	r2,r2,r3
 cf8:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 cfc:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 d00:	30000626 	beq	r6,zero,d1c <alt_iic_isr_register+0x58>
 d04:	0000c3c0 	call	c3c <alt_ic_irq_enable>
  NIOS2_WRITE_STATUS (context);
 d08:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 d0c:	dfc00117 	ldw	ra,4(sp)
 d10:	dc000017 	ldw	r16,0(sp)
 d14:	dec00204 	addi	sp,sp,8
 d18:	f800283a 	ret
    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 d1c:	0000c740 	call	c74 <alt_ic_irq_disable>
 d20:	003ff906 	br	d08 <alt_iic_isr_register+0x44>
  int rc = -EINVAL;  
 d24:	00bffa84 	movi	r2,-22
}
 d28:	f800283a 	ret

00000d2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 d2c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 d30:	00800034 	movhi	r2,0
 d34:	00c00034 	movhi	r3,0
 d38:	dfc00015 	stw	ra,0(sp)
 d3c:	10840004 	addi	r2,r2,4096
 d40:	18c3ac04 	addi	r3,r3,3760
 d44:	10c00326 	beq	r2,r3,d54 <alt_load+0x28>
  {
    while( to != end )
 d48:	01000034 	movhi	r4,0
 d4c:	21040504 	addi	r4,r4,4116
 d50:	1100141e 	bne	r2,r4,da4 <alt_load+0x78>
  if (to != from)
 d54:	00800034 	movhi	r2,0
 d58:	00c00034 	movhi	r3,0
 d5c:	10800804 	addi	r2,r2,32
 d60:	18c00804 	addi	r3,r3,32
 d64:	10c00326 	beq	r2,r3,d74 <alt_load+0x48>
    while( to != end )
 d68:	01000034 	movhi	r4,0
 d6c:	21006004 	addi	r4,r4,384
 d70:	1100111e 	bne	r2,r4,db8 <alt_load+0x8c>
  if (to != from)
 d74:	00800034 	movhi	r2,0
 d78:	00c00034 	movhi	r3,0
 d7c:	10840004 	addi	r2,r2,4096
 d80:	18c3ac04 	addi	r3,r3,3760
 d84:	10c00326 	beq	r2,r3,d94 <alt_load+0x68>
    while( to != end )
 d88:	01000034 	movhi	r4,0
 d8c:	21040004 	addi	r4,r4,4096
 d90:	11000e1e 	bne	r2,r4,dcc <alt_load+0xa0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 d94:	0000e300 	call	e30 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 d98:	dfc00017 	ldw	ra,0(sp)
 d9c:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
 da0:	0000e341 	jmpi	e34 <alt_icache_flush_all>
    {
      *to++ = *from++;
 da4:	19400017 	ldw	r5,0(r3)
 da8:	10800104 	addi	r2,r2,4
 dac:	18c00104 	addi	r3,r3,4
 db0:	117fff15 	stw	r5,-4(r2)
 db4:	003fe606 	br	d50 <alt_load+0x24>
 db8:	19400017 	ldw	r5,0(r3)
 dbc:	10800104 	addi	r2,r2,4
 dc0:	18c00104 	addi	r3,r3,4
 dc4:	117fff15 	stw	r5,-4(r2)
 dc8:	003fe906 	br	d70 <alt_load+0x44>
 dcc:	19400017 	ldw	r5,0(r3)
 dd0:	10800104 	addi	r2,r2,4
 dd4:	18c00104 	addi	r3,r3,4
 dd8:	117fff15 	stw	r5,-4(r2)
 ddc:	003fec06 	br	d90 <alt_load+0x64>

00000de0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 de0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 de4:	0009883a 	mov	r4,zero
{
 de8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
 dec:	0000e0c0 	call	e0c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 df0:	0000e2c0 	call	e2c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 df4:	d1a00d17 	ldw	r6,-32716(gp)
 df8:	d1600e17 	ldw	r5,-32712(gp)
 dfc:	d1200f17 	ldw	r4,-32708(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 e00:	dfc00017 	ldw	ra,0(sp)
 e04:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 e08:	0000c081 	jmpi	c08 <main>

00000e0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 e0c:	deffff04 	addi	sp,sp,-4
 e10:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 e14:	0000ea80 	call	ea8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 e18:	00800044 	movi	r2,1
 e1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 e20:	dfc00017 	ldw	ra,0(sp)
 e24:	dec00104 	addi	sp,sp,4
 e28:	f800283a 	ret

00000e2c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
}
 e2c:	f800283a 	ret

00000e30 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 e30:	f800283a 	ret

00000e34 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 e34:	f800283a 	ret

00000e38 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
 e38:	213ffe84 	addi	r4,r4,-6
 e3c:	20800428 	cmpgeui	r2,r4,16
 e40:	1000151e 	bne	r2,zero,e98 <alt_exception_cause_generated_bad_addr+0x60>
 e44:	200890ba 	slli	r4,r4,2
 e48:	00800034 	movhi	r2,0
 e4c:	2085883a 	add	r2,r4,r2
 e50:	10839617 	ldw	r2,3672(r2)
 e54:	1000683a 	jmp	r2
 e58:	00000ea0 	cmpeqi	zero,zero,58
 e5c:	00000ea0 	cmpeqi	zero,zero,58
 e60:	00000e98 	cmpnei	zero,zero,58
 e64:	00000e98 	cmpnei	zero,zero,58
 e68:	00000e98 	cmpnei	zero,zero,58
 e6c:	00000ea0 	cmpeqi	zero,zero,58
 e70:	00000e98 	cmpnei	zero,zero,58
 e74:	00000e98 	cmpnei	zero,zero,58
 e78:	00000ea0 	cmpeqi	zero,zero,58
 e7c:	00000ea0 	cmpeqi	zero,zero,58
 e80:	00000e98 	cmpnei	zero,zero,58
 e84:	00000ea0 	cmpeqi	zero,zero,58
 e88:	00000e98 	cmpnei	zero,zero,58
 e8c:	00000e98 	cmpnei	zero,zero,58
 e90:	00000e98 	cmpnei	zero,zero,58
 e94:	00000ea0 	cmpeqi	zero,zero,58
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 e98:	0005883a 	mov	r2,zero
 e9c:	f800283a 	ret
 ea0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 ea4:	f800283a 	ret

00000ea8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 ea8:	000170fa 	wrctl	ienable,zero
}
 eac:	f800283a 	ret
